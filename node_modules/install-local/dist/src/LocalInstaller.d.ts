/// <reference types="node" />
import { EventEmitter } from 'events';
import { InstallTarget } from './index';
export interface Env {
    [name: string]: string;
}
export interface Options {
    npmEnv?: Env;
}
export interface ListByPackage {
    [key: string]: string[];
}
interface EventMap {
    install_targets_identified: [InstallTarget[]];
    install_start: [ListByPackage];
    installed: [pkg: string, stdout: string, stderr: string];
    packing_start: [allSources: string[]];
    packed: [location: string];
    packing_end: [];
    install_end: [];
}
export declare class LocalInstaller extends EventEmitter {
    private sourcesByTarget;
    private options;
    private uniqueDir;
    constructor(sourcesByTarget: ListByPackage, options?: Options);
    on<TEventName extends keyof EventMap>(event: TEventName, listener: (...args: EventMap[TEventName]) => void): this;
    emit<TEventName extends keyof EventMap>(event: TEventName, ...args: EventMap[TEventName]): boolean;
    install(): Promise<InstallTarget[]>;
    createTmpDirectory(tmpDir: string): Promise<void>;
    private installAll;
    private installOne;
    private resolvePackages;
    private identifyInstallTargets;
    private packAll;
    private packOne;
    private removeTmpDirectory;
}
export declare function resolve(packagesByTarget: ListByPackage): ListByPackage;
export {};
//# sourceMappingURL=LocalInstaller.d.ts.map