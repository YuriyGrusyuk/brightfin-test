"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.siblingInstall = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const helpers_1 = require("./helpers");
const index_1 = require("./index");
function filterTruthy(values) {
    return values.filter((v) => v);
}
function readSiblingTargets() {
    const currentDirectoryName = path_1.default.basename(process.cwd());
    return fs_1.promises
        .readdir('..')
        .then((dirs) => dirs.filter((dir) => dir !== currentDirectoryName))
        .then((dirs) => dirs.map((dir) => path_1.default.resolve('..', dir)))
        .then((dirs) => Promise.all(dirs.map((directory) => helpers_1.readPackageJson(directory)
        .then((packageJson) => ({ directory, packageJson }))
        .catch(() => null))))
        .then(filterTruthy);
}
function siblingTargetsCurrent(siblingPackage) {
    var _a;
    const currentDirectory = path_1.default.resolve('.');
    return Object.values((_a = siblingPackage.packageJson.localDependencies) !== null && _a !== void 0 ? _a : {}).some((localDependencyPath) => path_1.default.resolve(localDependencyPath) === currentDirectory);
}
function siblingInstall() {
    return readSiblingTargets()
        .then((siblings) => siblings.filter(siblingTargetsCurrent))
        .then((targets) => {
        const sourceByTarget = {};
        targets.forEach((target) => (sourceByTarget[target.directory] = ['.']));
        const installer = new index_1.LocalInstaller(sourceByTarget);
        index_1.progress(installer);
        return installer.install();
    })
        .then(() => void 0);
}
exports.siblingInstall = siblingInstall;
//# sourceMappingURL=siblingInstall.js.map