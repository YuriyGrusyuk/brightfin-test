"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveIfNeeded = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
async function saveIfNeeded(targets, options) {
    if (options.save) {
        await Promise.all(targets.map(save));
    }
}
exports.saveIfNeeded = saveIfNeeded;
async function save(target) {
    const dependencies = target.packageJson.localDependencies ||
        (target.packageJson.localDependencies = {});
    const dependenciesBefore = Object.assign({}, dependencies);
    target.sources
        .sort((a, b) => a.directory.localeCompare(b.directory))
        .forEach((source) => (dependencies[source.packageJson.name] = path_1.default
        .relative(target.directory, source.directory)
        .replace(/\\/g, '/')));
    if (!equals(dependencies, dependenciesBefore)) {
        await savePackageJson(target);
    }
}
async function savePackageJson(target) {
    await fs_1.promises.writeFile(path_1.default.resolve(target.directory, 'package.json'), JSON.stringify(target.packageJson, undefined, 2), { encoding: 'utf8' });
}
function equals(a, b) {
    const aNames = sortedNames(a);
    const bNames = sortedNames(b);
    if (aNames.length === bNames.length) {
        while (aNames.length) {
            if (!equalDependency(aNames.pop(), bNames.pop(), a, b)) {
                return false;
            }
        }
        return true;
    }
    return false;
}
function equalDependency(aKey, bKey, aDeps, bDeps) {
    return aKey === bKey && aKey && bKey && aDeps[aKey] === bDeps[bKey];
}
function sortedNames(subject) {
    return Object.keys(subject).sort();
}
//# sourceMappingURL=save.js.map